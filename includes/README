<h1 id='5ea2e0cde2'>简介</h1>
<p>欢迎使用HashKey API！此文档是HashKey API的唯一官方文档，HashKey API提供的能力会在此持续更新，请大家及时关注。</p>
<h2 id='152d3db758'>联系我们</h2>
<p>使用过程中如有问题或者建议，您可选择以下任一方式联系我们。</p>
<h1 id='2d07d50c97'>接入说明</h1><h2 id='c1ae0a8486'>接入准备</h2>
<p>如需使用API ，请先登录网页端，完成API key的申请和权限配置，再据此文档详情进行开发和交易。
每个账户最多可创建10组Api Key，每个Api Key可对应设置读取、交易、提现三种权限。
权限说明如下：
- 读取权限：读取权限用于对数据的查询接口，例如：订单查询、成交查询等。
- 交易权限：交易权限用于下单、撤单、划转类接口。
- 提现权限：提现权限用于创建提币订单、取消提币订单操作。</p>

<p>创建成功后请务必记住以下信息：
 - Access Key API 访问密钥
 - Secret Key 签名认证加密所使用的密钥（仅申请时可见）</p>
<h2 id='sdk'>SDK示例</h2>
<p>具体示例请参考具体请求样例。</p>
<h2 id='c64cd15fdc'>签名认证</h2><h3 id='34addae335'>签名说明</h3>
<p>API 请求在通过 internet 传输的过程中极有可能被篡改，为了确保请求未被更改，除公共接口（基础信息，行情数据）外的私有接口均必须使用您的 API Key 做签名认证，以校验参数或参数值在传输途中是否发生了更改。
每一个API Key需要有适当的权限才能访问相应的接口，每个新创建的API Key都需要分配权限。在使用接口前，请查看每个接口的权限类型，并确认你的API Key有相应的权限。</p>

<p>对API端点的所有HTTP请求都需要身份验证和授权。
用户可以通过创建API key流程获得key和sercet，key和sercet用于验证和授权所有请求。
以下标头应添加到所有HTTP请求中：</p>

<table><thead>
<tr>
<th>Key</th>
<th>Value</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>x-access-key</td>
<td>&lt;API_KEY&gt;</td>
<td>您申请的 API Key 中的 Access Key</td>
</tr>
<tr>
<td>x-access-sign</td>
<td>&lt;signatureOfRequest&gt;</td>
<td>签名计算得出的值，用于确保签名有效和未被篡改</td>
</tr>
<tr>
<td>x-access-timestamp</td>
<td>&lt;timeOfRequest&gt;</td>
<td>当前时间格式为当前的时间戳（以毫秒为单位）</td>
</tr>
<tr>
<td>x-access-version</td>
<td>&lt;versionOfRequest&gt;</td>
<td>签名协议的版本，默认为1</td>
</tr>
</tbody></table>
<h3 id='1fbac240b7'>签名步骤</h3><h3 id='a9f7555e5e'>样例：</h3><div class="highlight"><pre class="highlight java tab-java"><code>         <span class="cm">/**
         * 签名说明：签名所需字段apiKey、apiSecret、timestamp、version、各请求接口字段。
         *                 字段名和字段值采用key-value形式，且对Key使用ASCII码排序.
         *                 以下为测试数据demo
         */</span>
        <span class="nc">String</span> <span class="n">key</span><span class="o">=</span><span class="s">"84dd8e670471a888e3a7547e120886cb"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">secret</span> <span class="o">=</span> <span class="s">"3211b4306fcb1d9670cbee5abc69dead"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">timeOfRequest</span> <span class="o">=</span><span class="s">"1478692862000"</span><span class="o">;</span>

        <span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">treeMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;();</span>

        <span class="n">treeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"x-access-key"</span><span class="o">,</span><span class="n">key</span><span class="o">);</span> <span class="c1">//api-key</span>
        <span class="n">treeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"x-access-timestamp"</span><span class="o">,</span><span class="n">timeOfRequest</span><span class="o">);</span> <span class="c1">//当前时间戳</span>
        <span class="n">treeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"x-access-version"</span><span class="o">,</span><span class="s">"1"</span><span class="o">);</span><span class="c1">//版本号默认1</span>

        <span class="n">treeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"feild1"</span><span class="o">,</span><span class="s">"1"</span><span class="o">);</span><span class="c1">//请求字段mock1</span>
        <span class="n">treeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"feild2"</span><span class="o">,</span><span class="s">"2"</span><span class="o">);</span><span class="c1">//请求字段mock2</span>
        <span class="n">treeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"feild3"</span><span class="o">,</span><span class="s">"3"</span><span class="o">);</span><span class="c1">//请求字段mock3</span>

        <span class="nc">String</span> <span class="n">requestText</span> <span class="o">=</span> <span class="nc">JSONObject</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">treeMap</span><span class="o">);</span>
        <span class="c1">//根据Map key的ASCII 排序 {"feild1":"1","feild2":"2","feild3":"3","x-access-key":"84dd8e670471a888e3a7547e120886cb","x-access-timestamp":"1478692862000","x-access-version":"1"}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">createSignature</span><span class="o">(</span><span class="n">requestText</span><span class="o">,</span><span class="n">secret</span><span class="o">));</span>
        <span class="c1">//PiB3bk0wWgY2mN9efTmCrKCtn6PZUsrlHhCsXNLUPtU=</span>

        <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">createSignature</span><span class="o">(</span><span class="nc">String</span> <span class="n">requestText</span><span class="o">,</span><span class="nc">String</span> <span class="n">secret</span><span class="o">)</span> 
                     <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
              <span class="k">return</span> <span class="nc">Base64Utils</span><span class="o">.</span><span class="na">encodeToString</span><span class="o">(</span><span class="n">hmacSha1</span><span class="o">(</span><span class="n">requestText</span><span class="o">,</span> <span class="n">secret</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="kd">private</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">hmacSha1</span><span class="o">(</span><span class="nc">String</span> <span class="n">plainData</span><span class="o">,</span> <span class="nc">String</span> <span class="n">secret</span><span class="o">)</span>  
                    <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">{</span>
            <span class="nc">Mac</span> <span class="n">mac</span> <span class="o">=</span> <span class="nc">Mac</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"HmacSHA256"</span><span class="o">);</span>
            <span class="nc">SecretKeySpec</span> <span class="n">secretKey</span> <span class="o">=</span> 
                 <span class="k">new</span> <span class="nf">SecretKeySpec</span><span class="o">(</span><span class="nc">Base64Utils</span><span class="o">.</span><span class="na">decodeFromString</span><span class="o">(</span><span class="n">secret</span><span class="o">),</span> <span class="s">"HmacSHA256"</span><span class="o">);</span>
            <span class="n">mac</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">secretKey</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">mac</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">plainData</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
         <span class="o">}</span>
</code></pre></div><h2 id='3951e02bdc'>接口概览</h2><h3 id='5076603a3e'>接口类型</h3>
<p>HashKey Pro为用户提供两种接口，您可根据自己的使用场景来选择适合的方式。
<strong>Rest API</strong>
REST，即Representational State Transfer的缩写，是目前较为流行的基于HTTP的一种通信机制，每一个URL代表一种资源。
交易或资产提币等一次性操作，建议开发者使用REST API进行操作。</p>

<p><strong>WebSocket API</strong>
WebSocket是HTML5一种新的协议（Protocol）。它实现了客户端与服务器全双工通信，通过一次简单的握手就可以建立客户端和服务器连接，服务器可以根据业务规则主动推送信息给客户端。
市场行情和买卖深度等信息，建议开发者使用WebSocket API进行获取。</p>
<h3 id='26d2ab2ffb'>接口简述</h3><h2 id='e82ff6cf6f'>环境信息</h2><h3 id='7a4cfb2662'>测试环境</h3>
<p>Restful URL: https://int.hashkey3.com</p>

<p>WebSocket: wss://int.hashkey3.com</p>
<h3 id='7f152260df'>生产环境</h3>
<p>Restful URL: https://int.hashkey3.com</p>

<p>WebSocket: wss://int.hashkey3.com</p>
<h1 id='0adb1147b3'>常见问题</h1><h1 id='rest-api'>Rest API</h1><h2 id='2d07d50c97-2'>接入说明</h2><h3 id='c1fd2fc5ac'>限频规则</h3>
<p>除已单独标注限频值的接口外 - 每个API Key 在1秒之内限制10次 </p>

<p>比如：
资产订单类接口调用根据API Key进行限频：1秒10次</p>
<h3 id='21d67c3c4c'>请求格式</h3>
<p>所有的API请求都是restful，目前只有两种方法：GET和POST
 - GET请求：业务参数都在路径参数里
 - POST请求，业务参数以JSON格式发送在请求主体（body）里</p>
<h3 id='dac673286f'>返回格式</h3>
<p>所有的接口都是JSON格式。在JSON最上层有四个字段：status, ch, ts 和 data。前三个字段表示请求状态和属性，实际的业务数据在data字段里。</p>

<table><thead>
<tr>
<th>参数名称</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead><tbody>
<tr>
<td>errorCode</td>
<td>String</td>
<td>API接口返回状态</td>
</tr>
<tr>
<td>errorMessage</td>
<td>String</td>
<td>API接口错误描述信息</td>
</tr>
<tr>
<td>data</td>
<td>Object</td>
<td>接口返回数据主体</td>
</tr>
</tbody></table>
<h2 id='rest-api-2'>REST API</h2>
<p><a href="https://github.com/hashkey-pro/open-api/blob/master/rest-api.md">rest-api</a></p>
<h1 id='websocket-api'>Websocket API</h1><h2 id='2d07d50c97-3'>接入说明</h2><h3 id='8225783f38'>接入地址</h3>
<ul>
<li> /api/websocket-api/v1/stream
### 接入限制</li>
<li> 同一apiKey最多允许创建10条session长连接。比如：订单成交数据订阅，同一apiKey最多允许建立10条session连接。</li>
<li> 同一ip最多允许建立5条session长连接。比如：行情数据推送无需apiKey，同一ip地址最多允许建立5条连接。</li>
</ul>
<h3 id='1853724646'>心跳消息</h3>
<p>当用户的Websocket客户端连接到HashKey Websocket服务器后，服务器会定期（当前设为10秒）向其发送ping消息并包含一整数值如下：
<code>java
{&quot;type&quot;:&quot;ping&quot;,&quot;data&quot;=&quot;1492420473027&quot;}
</code></p>

<p>当用户的Websocket客户端接收到此心跳消息后，应返回pong消息并包含同一整数值：</p>
<div class="highlight"><pre class="highlight java tab-java"><code><span class="o">{</span><span class="s">"type"</span><span class="o">:</span><span class="s">"pong"</span><span class="o">,</span><span class="s">"data"</span><span class="o">=</span><span class="s">"1492420473027"</span><span class="o">}</span>
</code></pre></div>
<p>注：当Websocket服务器连续两次发送了<code>ping</code>消息却没有收到任何一次<code>pong</code>消息返回后，服务器将主动断开与此客户端的连接。</p>
<h3 id='21d67c3c4c-2'>请求格式</h3>
<p>所有的请求都是JSON格式，订阅不同topic传递不同参数，请参考具体接口请求样例。</p>
<h3 id='dac673286f-2'>返回格式</h3>
<p>所有的响应都是JSON格式，不同topic返回data各有不同，请参考具体接口响应样例。</p>
<h2 id='1da6708ecc'>鉴权</h2><h3 id='0719dac40c'>请求正文</h3>
<table><thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>是否必填</th>
<th>注释</th>
<th>说明</th>
</tr>
</thead><tbody>
<tr>
<td>type</td>
<td>String</td>
<td>true</td>
<td>操作类型</td>
<td>默认为auth</td>
</tr>
<tr>
<td>x-access-key</td>
<td>String</td>
<td>true</td>
<td>访问Key</td>
<td>您申请的 API Key 中的 Access Key</td>
</tr>
<tr>
<td>x-access-sign</td>
<td>String</td>
<td>true</td>
<td>签名</td>
<td>签名计算得出的值，用于确保签名有效和未被篡改</td>
</tr>
<tr>
<td>x-access-timestamp</td>
<td>String</td>
<td>true</td>
<td>时间戳</td>
<td>当前时间格式为当前的时间戳（以毫秒为单位）</td>
</tr>
<tr>
<td>x-access-version</td>
<td>String</td>
<td>true</td>
<td>版本号</td>
<td>签名协议的版本，默认为1</td>
</tr>
</tbody></table>
<h3 id='ac5260f829'>响应正文</h3>
<table><thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>是否必填</th>
<th>注释</th>
<th>说明</th>
</tr>
</thead><tbody>
<tr>
<td>type</td>
<td>String</td>
<td>true</td>
<td>操作类型</td>
<td>默认为auth-resp</td>
</tr>
<tr>
<td>errorCode</td>
<td>String</td>
<td>true</td>
<td>错误码</td>
<td>0000</td>
</tr>
<tr>
<td>errorMessage</td>
<td>String</td>
<td>true</td>
<td>错误信息</td>
<td>success</td>
</tr>
</tbody></table>
<div class="highlight"><pre class="highlight java tab-java"><code><span class="n">请求样例</span><span class="err">：</span>
<span class="o">{</span>
    <span class="s">"type"</span><span class="o">:</span><span class="s">"auth"</span><span class="o">,</span>
    <span class="s">"auth"</span><span class="o">:{</span>
        <span class="s">"x-access-key"</span><span class="o">:</span><span class="s">"xxxxxxxxx"</span><span class="o">,</span>
        <span class="s">"x-access-sign"</span><span class="o">:</span><span class="s">"xxxxxxxxx"</span><span class="o">,</span>
        <span class="s">"x-access-timestamp"</span><span class="o">:</span><span class="s">"150782303000"</span><span class="o">,</span>
        <span class="s">"x-access-version"</span><span class="o">:</span><span class="s">"2"</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="n">响应样例</span><span class="err">：</span>
<span class="o">{</span>
    <span class="s">"type"</span><span class="o">:</span><span class="s">"auth-resp"</span><span class="o">,</span>
    <span class="s">"errorCode"</span><span class="o">:</span><span class="s">"0000"</span><span class="o">,</span>
    <span class="s">"errorMessage"</span><span class="o">:</span><span class="s">"success"</span>    
<span class="o">}</span>
</code></pre></div><h2 id='65cd7614bc'>订阅主题</h2><h3 id='0719dac40c-2'>请求正文</h3>
<table><thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>是否必填</th>
<th>注释</th>
<th>说明</th>
</tr>
</thead><tbody>
<tr>
<td>type</td>
<td>String</td>
<td>true</td>
<td>操作类型</td>
<td>sub</td>
</tr>
<tr>
<td>topic</td>
<td>String</td>
<td>true</td>
<td>订阅的主题</td>
<td></td>
</tr>
<tr>
<td>apiKey</td>
<td>String</td>
<td>false</td>
<td>apiKey 私有流必传</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id='ac5260f829-2'>响应正文</h3>
<table><thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>是否必填</th>
<th>注释</th>
<th>说明</th>
</tr>
</thead><tbody>
<tr>
<td>type</td>
<td>String</td>
<td>true</td>
<td>操作类型</td>
<td>默认为sub-resp</td>
</tr>
<tr>
<td>errorCode</td>
<td>String</td>
<td>true</td>
<td>错误码</td>
<td>0000</td>
</tr>
<tr>
<td>errorMessage</td>
<td>String</td>
<td>true</td>
<td>错误信息</td>
<td>success</td>
</tr>
<tr>
<td>data</td>
<td>Object</td>
<td>true</td>
<td>数据</td>
<td></td>
</tr>
</tbody></table>
<div class="highlight"><pre class="highlight java tab-java"><code><span class="n">请求样例</span><span class="err">：</span>
<span class="o">{</span>
    <span class="s">"type"</span><span class="o">:</span><span class="s">"sub"</span><span class="o">,</span>
    <span class="s">"channels"</span><span class="o">:</span>  <span class="o">[</span>
        <span class="o">{</span>
        <span class="s">"topic"</span><span class="o">:</span><span class="s">"xxxxxxxxx"</span><span class="o">,</span>
        <span class="o">......</span>
        <span class="o">},</span>
        <span class="o">{</span>
        <span class="s">"topic"</span><span class="o">:</span><span class="s">"xxxxxxxxx"</span><span class="o">,</span>
        <span class="o">......</span>
        <span class="o">}</span>
    <span class="o">]</span>
<span class="o">}</span>
<span class="n">响应样例</span><span class="err">：</span>
<span class="o">{</span>
    <span class="s">"type"</span><span class="o">:</span><span class="s">"sub-resp"</span><span class="o">,</span>
    <span class="s">"errorCode"</span><span class="o">:</span><span class="s">"0000"</span><span class="o">,</span>
    <span class="s">"errorMessage"</span><span class="o">:</span><span class="s">"success"</span><span class="o">,</span>
    <span class="s">"data"</span><span class="o">:</span> <span class="o">[</span>
        <span class="o">{</span>
           <span class="o">....</span>
        <span class="o">}</span>
    <span class="o">]</span>
<span class="o">}</span>
</code></pre></div><h2 id='b109d834a1'>取消订阅</h2><h3 id='0719dac40c-3'>请求正文</h3>
<table><thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>是否必填</th>
<th>注释</th>
<th>说明</th>
</tr>
</thead><tbody>
<tr>
<td>type</td>
<td>String</td>
<td>true</td>
<td>操作类型</td>
<td>unsub</td>
</tr>
<tr>
<td>topic</td>
<td>String</td>
<td>true</td>
<td>订阅的主题</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id='ac5260f829-3'>响应正文</h3>
<table><thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>是否必填</th>
<th>注释</th>
<th>说明</th>
</tr>
</thead><tbody>
<tr>
<td>type</td>
<td>String</td>
<td>true</td>
<td>操作类型</td>
<td>默认为unsub-resp</td>
</tr>
<tr>
<td>errorCode</td>
<td>String</td>
<td>true</td>
<td>错误码</td>
<td>0000</td>
</tr>
<tr>
<td>errorMessage</td>
<td>String</td>
<td>true</td>
<td>错误信息</td>
<td>success</td>
</tr>
</tbody></table>
<div class="highlight"><pre class="highlight java tab-java"><code><span class="n">请求样例</span><span class="err">：</span>
<span class="o">{</span>
    <span class="s">"type"</span><span class="o">:</span><span class="s">"unsub"</span><span class="o">,</span>
    <span class="s">"channel"</span><span class="o">:</span>  <span class="o">{</span>
        <span class="s">"topic"</span><span class="o">:</span><span class="s">"xxxxxxxxx"</span><span class="o">,</span>
        <span class="o">......</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="n">响应样例</span><span class="err">：</span>
<span class="o">{</span>
    <span class="s">"type"</span><span class="o">:</span><span class="s">"unsub-resp"</span><span class="o">,</span>
    <span class="s">"errorCode"</span><span class="o">:</span><span class="s">"0000"</span><span class="o">,</span>
    <span class="s">"errorMessage"</span><span class="o">:</span><span class="s">"success"</span>
<span class="o">}</span>
</code></pre></div><h2 id='websocket-api-2'>websocket API</h2>
<p><a href="https://github.com/hashkey-pro/open-api/blob/master/websocket-api.md">websocket-api</a></p>
<h1 id='a38a81c9d5'>错误信息</h1><h3 id='244a640ee8'>错误码划分规范</h3>
<table><thead>
<tr>
<th>错误码</th>
<th>描述</th>
</tr>
</thead><tbody>
<tr>
<td>0000~0099</td>
<td>公共错误码</td>
</tr>
<tr>
<td>0100~0199</td>
<td>WebSocket错误码</td>
</tr>
<tr>
<td>0200~0299</td>
<td>行情错误码</td>
</tr>
</tbody></table>
<h3 id='e95a10d43b'>错误码对照表</h3>
<table><thead>
<tr>
<th>错误类型</th>
<th>错误码</th>
<th>错误信息</th>
<th>描述</th>
</tr>
</thead><tbody>
<tr>
<td>公共错误码</td>
<td>0000</td>
<td>success</td>
<td>成功</td>
</tr>
<tr>
<td>公共错误码</td>
<td>0092</td>
<td>network error</td>
<td>网络连接异常</td>
</tr>
<tr>
<td>公共错误码</td>
<td>0096</td>
<td>system error</td>
<td>系统异常</td>
</tr>
</tbody></table>
